#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e
set -x

echo ''

info () {
  echo ''
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  echo ''
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  echo ''
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  echo '!!!!!!!!!!!!!!!!!!'
  echo ''
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

git remote set-url origin git@github.com:eljojo/dotfiles.git
setup_gitconfig
install_dotfiles

touch ~/.env-vars

info "installing dependencies"
bin/dotfile-maintenance

if [ -d "$HOME/.vim" ]; then
  echo "upgrading vim plugins"
  cd "$HOME/.vim"
  git remote set-url origin git@github.com:eljojo/vimfiles.git
  vim +PlugInstall +qall
else
  echo "installing vimfiles"
  git clone https://github.com/eljojo/vimfiles.git ~/.vim
  ~/.vim/install.sh
fi

if [ -d "$HOME/.zprezto" ]; then
  echo "updating prezto"
  cd ~/.zprezto
  git pull
  git submodule update --init --recursive
else
  echo "installing prezto"
  git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
fi

success "dependencies installed"

# @see http://vim.1045645.n5.nabble.com/MacVim-and-PATH-tt3388705.html#a3392363
# Ensure MacVim has same shell as Terminal
# if [[ -a /etc/zshenv ]]; then
#   echo "we're going to fix ZSH"
#   sudo mv /etc/zshenv /etc/zprofile
# fi

if [ ! -d "$HOME/.ssh" ]; then
  echo "generating new ssh key"
  ssh-keygen -t ed25519 -a 100 -C "$(whoami)@$(hostname -s)"
  echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_ecdsa">~/.ssh/config
  if [ "$(uname -s)" == "Darwin" ]
  then
    ssh-add -K ~/.ssh/id_ecdsa
  else
    ssh-add ~/.ssh/id_ecdsa
  fi
  echo "your new public key is:"
  cat ~/.ssh/id_ecdsa.pub
  echo ""
fi

echo ''
echo '  All installed!'
echo '  Please set the terminal to zsh :)'
